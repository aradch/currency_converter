{"version":3,"sources":["CurrencyRow.jsx","api.js","App.jsx","reportWebVitals.js","index.js"],"names":["CurrencyRow","currencyOptions","selectedCurrency","onChangeCurrency","amount","onChangeAmount","value","onChange","map","option","type","baseUrl","api","fetch","then","data","json","currency","App","fromAmount","toAmount","useState","setCurrencyOptions","fromCurrency","setFromCurrency","fromCurrencyScale","setFromCurrencyScale","fromCurrencyExchangeRate","setFromCurrencyExchangeRate","toCurrency","setToCurrency","toCurrencyScale","setToCurrencyScale","toCurrencyExchangeRate","setToCurrencyExchangeRate","exchangeRate","setExchangeRate","setAmount","amountInCurrency","setAmountInCurrency","fromCurrencySelected","setFromCurrencySelected","useEffect","response","firstCurrency","secondCurrency","r","Cur_Abbreviation","Cur_OfficialRate","toFixed","Cur_Scale","undefined","e","target","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6517c269.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst CurrencyRow = ({\r\n  currencyOptions,\r\n  selectedCurrency,\r\n  onChangeCurrency,\r\n  amount,\r\n  onChangeAmount,\r\n}) => {\r\n  return (\r\n    <div>\r\n      <select value={selectedCurrency} onChange={onChangeCurrency}>\r\n        {currencyOptions.map((option) => (\r\n          <option key={option} value={option}>\r\n            {option}\r\n          </option>\r\n        ))}\r\n      </select>\r\n      <input type=\"number\" value={amount} onChange={onChangeAmount} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CurrencyRow;\r\n","const baseUrl = \"https://www.nbrb.by/api/exrates/rates\";\r\n\r\nexport const api = {\r\n  apiData() {\r\n    return fetch(`${baseUrl}?periodicity=0`).then((data) => data.json());\r\n  },\r\n  currencyData(currency) {\r\n    return fetch(`${baseUrl}/${currency}?parammode=2`).then((data) =>\r\n      data.json()\r\n    );\r\n  },\r\n};\r\n","import { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport CurrencyRow from \"./CurrencyRow\";\nimport { api } from \"./api\";\n\nfunction App() {\n  const [currencyOptions, setCurrencyOptions] = useState([]);\n  const [fromCurrency, setFromCurrency] = useState();\n  const [fromCurrencyScale, setFromCurrencyScale] = useState();\n  const [fromCurrencyExchangeRate, setFromCurrencyExchangeRate] = useState();\n  const [toCurrency, setToCurrency] = useState();\n  const [toCurrencyScale, setToCurrencyScale] = useState();\n  const [toCurrencyExchangeRate, setToCurrencyExchangeRate] = useState();\n  const [exchangeRate, setExchangeRate] = useState();\n  const [amount, setAmount] = useState(1);\n  const [amountInCurrency, setAmountInCurrency] = useState(true);\n  const [fromCurrencySelected, setFromCurrencySelected] = useState(true);\n\n  let fromAmount, toAmount;\n  if (amountInCurrency) {\n    fromAmount = amount;\n    toAmount = amount * exchangeRate;\n  } else {\n    toAmount = amount;\n    fromAmount = amount / exchangeRate;\n  }\n\n  const handleFromAmountChange = (e) => {\n    setAmount(e.target.value);\n    setAmountInCurrency(true);\n  };\n  const handleToAmountChange = (e) => {\n    setAmount(e.target.value);\n    setAmountInCurrency(false);\n  };\n\n  const handleFromCurrencyChange = (e) => {\n    setFromCurrency(e.target.value);\n    setFromCurrencySelected(true);\n  };\n  const handleToCurrencyChange = (e) => {\n    setToCurrency(e.target.value);\n    setFromCurrencySelected(false);\n  };\n\n  useEffect(() => {\n    api.apiData().then((response) => {\n      const firstCurrency = response[4];\n      const secondCurrency = response[0];\n      setCurrencyOptions(response.map((r) => r.Cur_Abbreviation));\n      setFromCurrency(firstCurrency.Cur_Abbreviation);\n      setToCurrency(secondCurrency.Cur_Abbreviation);\n      setExchangeRate(\n        (\n          firstCurrency.Cur_OfficialRate / secondCurrency.Cur_OfficialRate\n        ).toFixed(2)\n      );\n      setFromCurrencyScale(firstCurrency.Cur_Scale);\n      setFromCurrencyExchangeRate(firstCurrency.Cur_OfficialRate);\n      setToCurrencyScale(secondCurrency.Cur_Scale);\n      setToCurrencyExchangeRate(secondCurrency.Cur_OfficialRate);\n    });\n  }, []);\n\n  useEffect(() => {\n    if (!!fromCurrency && exchangeRate !== undefined && fromCurrencySelected) {\n      api.currencyData(fromCurrency).then((response) => {\n        setFromCurrencyScale(response.Cur_Scale);\n        setFromCurrencyExchangeRate(response.Cur_OfficialRate);\n        setExchangeRate(\n          (\n            response.Cur_OfficialRate /\n            response.Cur_Scale /\n            (toCurrencyExchangeRate / toCurrencyScale)\n          ).toFixed(2)\n        );\n      });\n    } else if (\n      !!toCurrency &&\n      exchangeRate !== undefined &&\n      !fromCurrencySelected\n    ) {\n      api.currencyData(toCurrency).then((response) => {\n        setToCurrencyScale(response.Cur_Scale);\n        setToCurrencyExchangeRate(response.Cur_OfficialRate);\n        setExchangeRate(\n          (\n            fromCurrencyExchangeRate /\n            fromCurrencyScale /\n            (response.Cur_OfficialRate / response.Cur_Scale)\n          ).toFixed(2)\n        );\n      });\n    }\n  }, [fromCurrency, toCurrency]);\n\n  return (\n    <>\n      <h1>Currency converter</h1>\n      <CurrencyRow\n        currencyOptions={currencyOptions}\n        selectedCurrency={fromCurrency}\n        onChangeCurrency={handleFromCurrencyChange}\n        onChangeAmount={handleFromAmountChange}\n        amount={fromAmount}\n      />\n      <CurrencyRow\n        currencyOptions={currencyOptions}\n        selectedCurrency={toCurrency}\n        onChangeCurrency={handleToCurrencyChange}\n        onChangeAmount={handleToAmountChange}\n        amount={toAmount}\n      />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}